#include<iostream>
using namespace std;
typedef long long ll;

/* ----------------------- for using PBDS(policy base data structure) -------------------*/
       //using namespace __gnu_pbds;
       //#include<ext/pb_ds/assoc_container.hpp>
       //#include<ext/pb_ds/tree_policy.hpp>
       //typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key (0 based indexing)
/*----------------------------------------------------------------------------------------*/

bool isSafe(int** arr,int x,int y,int n){
    if(x<n && y<n && arr[x][y]==1){
        return true;
    }
    return  false;
}
int ratInMaze(int** arr,int x,int y,int n,int** solArr){
    if(x==n-1 && y==n-1){
        solArr[x][y]=1;
        return true;
    }
     if(isSafe(arr,x,y,n)){
        solArr[x][y]=1;
        if(ratInMaze(arr,x+1,y,n,solArr)){
            return true;
        }
           if(ratInMaze(arr,x,y+1,n,solArr)){
            return true;
        }
        solArr[x][y]=0;
        return false;
     }
     return false;
}

int32_t main(){
    int n;
    cin>>n;
    int** arr = new int*[n];
    for(int i=0;i<n;i++){
        arr[i] = new int[n];
    }
     for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin>>arr[i][j];
        }
    }
     int** solArr = new int*[n];
    for(int i=0;i<n;i++){
        solArr[i] = new int[n];
        for(int j=0;j<n;j++){
            solArr[i][j]=0;
        }
    }
        cout<<"\n"<<"\n";
       if(ratInMaze(arr,0,0,n,solArr)){
         for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<solArr[i][j]<<" ";
        }
        cout<<endl;
    }
       }
        return 0;
    }
